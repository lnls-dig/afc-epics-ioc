# AFC Timing global configuration

## read EVG FPGAClk value at startup.
## this works by using "closed_loop" OMSL,
## and we switch to "supervisory" after processing once
record(ao, "$(P)$(R)FPGAClk-Cte") {
    field(DESC, "FPGA Clock from EVG")
    field(EGU, "Hz")
    field(DOL, "AS-RaMO:TI-EVG:FPGAClk-Cte CP")
    field(OMSL, 1)
    field(FLNK, "$(P)$(R)DisableFPGAClk PP")
}
record(longout, "$(P)$(R)DisableFPGAClk"){
    field(VAL, 0)
    field(OUT, "$(P)$(R)FPGAClk-Cte.OMSL")
}

record(mbbi, "$(P)$(R)LinkStatus-Mon"){
    field(DTYP, "asynInt32")
    field(DESC, "Get link status")
    field(SCAN,"I/O Intr")
    field(INP,"@asyn($(PORT))LINK")
    field(NOBT,"1")
    field(ZRVL,"0")
    field(ONVL,"1")
    field(ZRST,"off")
    field(ONST,"on")
}

record(mbbi, "$(P)$(R)RxEnStatus-Mon"){
    field(DTYP, "asynInt32")
    field(DESC, "Get RX Enable Status")
    field(SCAN,"I/O Intr")
    field(INP,"@asyn($(PORT))RXEN")
    field(NOBT,"1")
    field(ZRVL,"0")
    field(ONVL,"1")
    field(ZRST,"off")
    field(ONST,"on")
}

record(bi, "$(P)$(R)AFCFreqLocked-Mon"){
    field(DTYP, "asynInt32")
    field(DESC, "AFC Frequency Locked Status")
    field(SCAN,"I/O Intr")
    field(INP,"@asyn($(PORT))LOCKED_AFC_FREQ")
    alias("$(P)$(R)AFCClkLocked-Mon")
    alias("$(P)$(R)RefClkLocked-Mon")
}
record(bi, "$(P)$(R)AFCPhaseLocked-Mon"){
    field(DTYP, "asynInt32")
    field(DESC, "AFC Phase Locked Status")
    field(SCAN,"I/O Intr")
    field(INP,"@asyn($(PORT))LOCKED_AFC_PHASE")
}
record(bi, "$(P)$(R)AFCFreqLockedLtc-Mon"){
    field(DTYP, "asynInt32")
    field(DESC, "AFC Frequency Locked Latch")
    field(SCAN,"I/O Intr")
    field(INP,"@asyn($(PORT))LOCKED_AFC_FREQ_LTC")
    alias("$(P)$(R)AFCClkLockedLtc-Mon")
}
record(bi, "$(P)$(R)AFCPhaseLockedLtc-Mon"){
    field(DTYP, "asynInt32")
    field(DESC, "AFC Phase Locked Latch")
    field(SCAN,"I/O Intr")
    field(INP,"@asyn($(PORT))LOCKED_AFC_PHASE_LTC")
}

record(bi, "$(P)$(R)RTMFreqLocked-Mon"){
    field(DTYP, "asynInt32")
    field(DESC, "RTM Frequency Locked Status")
    field(SCAN,"I/O Intr")
    field(INP,"@asyn($(PORT))LOCKED_RTM_FREQ")
    alias("$(P)$(R)RTMClkLocked-Mon")
}
record(bi, "$(P)$(R)RTMPhaseLocked-Mon"){
    field(DTYP, "asynInt32")
    field(DESC, "RTM Phase Locked Status")
    field(SCAN,"I/O Intr")
    field(INP,"@asyn($(PORT))LOCKED_RTM_PHASE")
}
record(bi, "$(P)$(R)RTMFreqLockedLtc-Mon"){
    field(DTYP, "asynInt32")
    field(DESC, "RTM Frequency Locked Latch")
    field(SCAN,"I/O Intr")
    field(INP,"@asyn($(PORT))LOCKED_RTM_FREQ_LTC")
    alias("$(P)$(R)RTMClkLockedLtc-Mon")
}
record(bi, "$(P)$(R)RTMPhaseLockedLtc-Mon"){
    field(DTYP, "asynInt32")
    field(DESC, "RTM Phase Locked Latch")
    field(SCAN,"I/O Intr")
    field(INP,"@asyn($(PORT))LOCKED_RTM_PHASE_LTC")
}

record(bi, "$(P)$(R)GT0ClkLocked-Mon"){
    field(DTYP, "asynInt32")
    field(DESC, "GT0 Clock Locked Status")
    field(SCAN,"I/O Intr")
    field(INP,"@asyn($(PORT))LOCKED_GT0")
}
record(bi, "$(P)$(R)GT0ClkLockedLtc-Mon"){
    field(DTYP, "asynInt32")
    field(DESC, "GT0 Latched Clock Locked Status")
    field(SCAN,"I/O Intr")
    field(INP,"@asyn($(PORT))LOCKED_GT0_LTC")
}

record(bo, "$(P)$(R)ClkLockedLtcRst-Cmd"){
  field(DTYP, "asynInt32")
  field(DESC, "Reset Clock Locked Latches")
  field(OUT,"@asyn($(PORT))RST_LOCKED_LTCS")
  field(MASK, "1")
  field(HIGH, "1")
  field(ZNAM, "nothing")
  field(ONAM, "reset")
}

record(bo, "$(P)$(R)DevEnbl-Sel"){
    field(DTYP, "asynInt32")
    field(DESC, "Event Receiver state control")
    field(PINI, YES)
    field(ZNAM, "Dsbl")
    field(ONAM, "Enbl")
    field(OUT,"@asyn($(PORT))EVREN")
}

record(bi, "$(P)$(R)DevEnbl-Sts"){
    field(DTYP, "asynInt32")
    field(ZNAM, "Dsbl")
    field(ONAM, "Enbl")
    field(DESC, "Event Receiver state status")
    field(INP,"@asyn($(PORT))EVREN")
    field(SCAN,"I/O Intr")
}

record(longin, "$(P)$(R)Alive-Mon"){
    field(DTYP, "asynInt32")
    field(DESC, "Alive free running counter")
    field(INP,"@asyn($(PORT))ALIVE")
    field(SCAN,"I/O Intr")
}

record(bo, "$(P)$(R)UpstreamDebugEn-Sel"){
    field(DTYP, "asynInt32")
    field(DESC, "Enable upstream debug")
    field(PINI, YES)
    field(ZNAM, "Dsbl")
    field(ONAM, "Enbl")
    field(OUT, "@asyn($(PORT))DBG_EN")
}
record(bi, "$(P)$(R)UpstreamDebugEn-Sts"){
    field(DTYP, "asynInt32")
    field(DESC, "Enable upstream debug")
    field(PINI, YES)
    field(ZNAM, "Dsbl")
    field(ONAM, "Enbl")
    field(INP, "@asyn($(PORT))DBG_EN")
    field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)UpstreamDebugCounterRst-Cmd"){
    field(DTYP, "asynInt32")
    field(DESC, "Reset debug counter")
    field(OUT, "@asyn($(PORT))DBG_COUNTER_RST")
    field(PINI, YES)
    field(MASK, 1)
    field(HIGH, 1)
    field(ZNAM, nothing)
    field(ONAM, reset)
}

record(longout, "$(P)$(R)UpstreamDebugEvtIn-SP"){
    field(DTYP, "asynInt32")
    field(DESC, "Downstream start event")
    field(PINI, YES)
    field(OUT, "@asyn($(PORT))DBG_EVT_DS_START")
}
record(longin, "$(P)$(R)UpstreamDebugEvtIn-RB"){
    field(DTYP, "asynInt32")
    field(DESC, "Downstream start event")
    field(INP, "@asyn($(PORT))DBG_EVT_DS_START")
    field(SCAN, "I/O Intr")
}

record(longout, "$(P)$(R)UpstreamDebugEvtOut-SP"){
    field(DTYP, "asynInt32")
    field(DESC, "Upstream event")
    field(PINI, YES)
    field(OUT, "@asyn($(PORT))DBG_EVT_US")
}
record(longin, "$(P)$(R)UpstreamDebugEvtOut-RB"){
    field(DTYP, "asynInt32")
    field(DESC, "Upstream event")
    field(INP, "@asyn($(PORT))DBG_EVT_US")
    field(SCAN, "I/O Intr")
}

record(longout, "$(P)$(R)UpstreamDebugSpacing-SP"){
    field(DTYP, "asynInt32")
    field(DESC, "Spacing between upstream events")
    field(PINI, YES)
    field(OUT, "@asyn($(PORT))DBG_EVT_SPACING")
}
record(longin, "$(P)$(R)UpstreamDebugSpacing-RB"){
    field(DTYP, "asynInt32")
    field(DESC, "Spacing between upstream events")
    field(INP, "@asyn($(PORT))DBG_EVT_SPACING")
    field(SCAN, "I/O Intr")
}

record(longout, "$(P)$(R)UpstreamDebugReps-SP"){
    field(DTYP, "asynInt32")
    field(DESC, "Upstream event repetitions")
    field(PINI, YES)
    field(OUT, "@asyn($(PORT))DBG_EVT_REPS")
}
record(longin, "$(P)$(R)UpstreamDebugReps-RB"){
    field(DTYP, "asynInt32")
    field(DESC, "Upstream event repetitions")
    field(INP, "@asyn($(PORT))DBG_EVT_REPS")
    field(SCAN, "I/O Intr")
}

record(longin, "$(P)$(R)UpstreamDebugCounter-Mon"){
    field(DTYP, "asynInt32")
    field(DESC, "Debug procedure counter")
    field(INP, "@asyn($(PORT))DBG_COUNTER")
    field(SCAN, "I/O Intr")
}
